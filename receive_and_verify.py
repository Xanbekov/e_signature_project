from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.serialization import load_pem_private_key, load_pem_public_key
from cryptography.exceptions import InvalidSignature
from base64 import b64decode
from Crypto.Cipher import AES
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
def load_public_key():
    with open("public.pem", "rb") as f:
        return load_pem_public_key(f.read())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≠–¶–ü
def verify_signature(file_path, signature_path, public_key):
    with open(file_path, "rb") as f:
        data = f.read()

    with open(signature_path, "rb") as sig_file:
        signature = sig_file.read()

    try:
        public_key.verify(
            signature,
            data,
            padding.PKCS1v15(),
            hashes.SHA256()
        )
        print("‚úÖ –ü–æ–¥–ø–∏—Å—å —Ñ–∞–π–ª–∞ –≤–µ—Ä–Ω–∞!")
    except InvalidSignature:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —Ñ–∞–π–ª–∞!")

# –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞
def decrypt_file(file_path, key_path):
    with open(key_path, "rb") as f:
        key = f.read()

    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ AES
    cipher = AES.new(key, AES.MODE_GCM)
    with open(file_path, "rb") as f:
        file_data = f.read()

    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    decrypted_data = cipher.decrypt_and_verify(file_data, None)  # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º nonce –∏ tag

    with open("decrypted_document.txt", "wb") as decrypted_file:
        decrypted_file.write(decrypted_data)
    print("üìÇ –§–∞–π–ª —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ decrypted_document.txt!")

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
if __name__ == "__main__":
    public_key = load_public_key()
    verify_signature("document.enc", "document.sig", public_key)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    decrypt_file("document.enc", "aes.enc")  # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞

